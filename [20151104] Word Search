// startTime: 22:10
// finishTime: 22:45 
// https://leetcode.com/problems/word-search/

public class Solution {
    public boolean exist(char[][] board, String word) {
        if (board.length == 0 || board.length * board[0].length < word.length()) return false;
        int n = board.length;
        int m = board[0].length;
        char[] wordArray = word.toCharArray();
        
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[i].length; j++)
            if (board[i][j] == wordArray[0]){
                List<List<Integer>> usedLoc = new ArrayList<List<Integer>>();
                if (helper(wordArray, 0, "", board, j , i, m, n, usedLoc)) return true;
            }
        }
        return false;
    }
    
    public boolean helper(char[] word, int index, String current, char[][] board, int x, int y ,int m, int n, List<List<Integer>> usedLoc){
        boolean res = false; 
        if (index > word.length - 1) return true;
        List<Integer> t = new ArrayList<Integer>();
        t.add(x);
        t.add(y);
        if (usedLoc.contains(t) || (x < 0 || x >= m || y < 0 || y >= n)) return false;
        if ((board[y][x] == word[index])){
            res = true;
            List<List<Integer>> usedLoc1 = new ArrayList<List<Integer>>();
            usedLoc1.addAll(usedLoc);
            usedLoc1.add(t);
            String s = current + word[index];
            return res = res && ( 
              helper(word, index + 1, s, board, x + 1, y, m, n, usedLoc1) ||
              helper(word, index + 1, s, board, x, y + 1, m, n, usedLoc1) ||
              helper(word, index + 1, s, board, x - 1, y, m, n, usedLoc1) ||
              helper(word, index + 1, s, board, x, y - 1, m, n, usedLoc1));
        }
        else return res;
    }
}
