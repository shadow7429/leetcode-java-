// startTime: 10: 15
// finishTime: 10: 41
// https://leetcode.com/problems/permutation-sequence/

// brute one:
public class Solution {
    public String getPermutation(int n, int k) {
        int index = -1;
        for (int i = 1; i <= n; i++){
            if (Math.pow(i, i) >= k) index = i; 
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= n - index; i++) sb.append(i);
        int[] change = new int[index];
        for (int i = n - index + 1; i <= n; i++){
            change[i - n + index - 1] = i;
        }
        for (int i = 1; i < k; i++) change = nextPermutation(change);
        for (int i = 0; i < change.length; i++) sb.append(change[i]);
        return sb.toString();
    }
    
    public int[] nextPermutation(int[] nums) {
        if (nums.length <= 1) return nums;
        int index1 = -1;
        for (int i = 0; i < nums.length - 1; i++){
            if (nums[i + 1] > nums[i]) index1 = i;
        }
        
        int index2 = -1;
        for (int i = index1 + 1; i < nums.length && index1 >= 0; i++){
            if (nums[i] > nums[index1]) index2 = i;
        }
        
        int tmp;
        if (index1 >= 0)
        {
            tmp = nums[index1];
            nums[index1] = nums[index2];
            nums[index2] = tmp;
        }
        
        for (int i = index1 + 1; i < nums.length - 1; i++){
            for (int j = i + 1; j < nums.length; j++){
                if (nums[i] > nums[j]){
                    tmp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = tmp;
                }
            }
        }
        return nums;
    }
}
/*
这个方法是结合了next—Permutation来求，其中做了一点改进是先判断是从哪一位开始变化可以得到第k个。这样的做法使得前面的序列可以保持
不变只对后面的部分求next-Permutaion。时间复杂度在O(n ^ 2 * k)上。不满足时间要求。
*/
// Answer in the discuss.
public class Solution {
    public String getPermutation(int n, int k) {
        List<Integer> num = new LinkedList<Integer>();
        for (int i = 1; i <= n; i++) num.add(i);
        if (n == 0) return "";
        if (n == 1) return "1";
        int[] f = new int[n];
        f[0] = 1;
        for (int i = 1; i < n; i++) f[i] = f[i - 1] * i; //阶乘
        k = k - 1;
        
        StringBuilder sb = new StringBuilder();
        for (int i = n; i >= 1; i--){
            int ind = k / f[i - 1];
            sb.append(num.get(ind));
            num.remove(ind);
            k = k % f[i - 1];
        }
        return sb.toString();
    }
}
/*
这个方法的思想是，对于一个n位的数组，它是由各个数字随机排列组合形成的，那么安排续我们可以把它分成(n-1)!个堆，每个堆第一位分别是
由从1到n组成的，也就是：
1 * * * * * *
2 * * * * * *
3 * * * * * *
...
n * * * * * *
所以其实就是一位一位的确定这个序列，f[]数组存储的就是阶乘，k / f[i - 1]就是求第k个落在了哪一组中，这里要注意，用了num这个list的
作用是如果在当前的序列中，已经用到了num.get(ind)这个值，则接下来的序列中不可能存在这个值了。k % f[i - 1]就是指在这一组中的第几大
的序列，那么当第一个数字确定下来之后，k = k % f[i - 1]就是看第二位开始的序列中第k个序列，也就是由此确定第二位数字是几。
！！至此，已经做过了求全部permutation、next_Permutation、 第i个permutation的题。 求全部的不考虑大小排序就是用list进行操作，按可插入
的位置进行每一位的插入。 next_Permuation就是利用数组之间数字的更换，以及对更换index之后的数组进行合理排序，以降低改变程度。这样的题
无法直接求出答案，一般都是按位来进行。
*/
