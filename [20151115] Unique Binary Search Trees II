// startTime: 10: 40
// finishTime: 11: 37
// https://leetcode.com/problems/unique-binary-search-trees-ii/

public class Solution {
    public List<TreeNode> generateTrees(int n) {
        return helper(1, n);
    }
    
    public List<TreeNode> helper(int start, int end){
        List<TreeNode> r = new ArrayList<TreeNode>();
        if (end < start){
            r.add(null);
            return r;
        }
        TreeNode node = null;
        for (int i = start; i <= end; i++){
            List<TreeNode>left = helper(start, i - 1);
            List<TreeNode>right = helper(i + 1, end);
            for (TreeNode ln : left){
                for (TreeNode rn : right){
                    node = new TreeNode(i);
                    node.left = ln;
                    node.right = rn;
                    r.add(node);
                }
            }
        }
        return r;
    }
}
/*
这道题的思路比较好想，就是对于n个节点的树，每一个节点都可能是根节点，如果选择i做根节点，那么从1到i - 1的节点均为i的左子树，
从i + 1到n的节点构成它的右子树。因此形成递归问题，左子树的节点又有i - 1中选法，右子树的节点有 n - i + 1中选法，所以helper函数
应该返回的是一个list<TreeNode>, 用于形成同一个根节点不同子树结构的一系列的树。
*/
