// startTime: 1: 16
// finishTime: 1: 33
// https://leetcode.com/problems/maximum-product-subarray/

//brute one:
public class Solution {
    public int maxProduct(int[] nums) {
        if (nums.length == 0) return 0;
        List<Integer> l = new ArrayList<Integer>();
        l.add(Integer.MIN_VALUE);
        for (int i = 0; i < nums.length; i++){
            int r = nums[i];
            if (r > l.get(0)) l.add(0, r);
            for (int j = i + 1; j < nums.length; j++){
                r = r * nums[j];
                if (r > l.get(0)) l.add(0, r);
            }
        }
        return l.get(0);
    }
}
// improved one:
public class Solution {
    public int maxProduct(int[] nums) {
        if (nums.length == 0) return 0;
        int max = nums[0];
        int min = nums[0];
        int res = nums[0];
        for (int i = 1; i < nums.length; i++){
            int tmp = max;
            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);
            min = Math.min(Math.min(tmp * nums[i], min * nums[i]), nums[i]);
            if (res < max) res = max;
        }
        return res;
    }
}
