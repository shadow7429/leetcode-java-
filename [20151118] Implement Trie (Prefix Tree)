// 由于不知道什么是trie，看了答案
// Trie 概念：https://zh.wikipedia.org/wiki/Trie
// https://leetcode.com/problems/implement-trie-prefix-tree/


class TrieNode {
    // Initialize your data structure here.
    public char val; //一个节点只存一个字符，所以一个string要用一系列的节点来表示
    public boolean isWord;
    public TrieNode[] children = new TrieNode[26];
    public TrieNode(){
        
    }
    public TrieNode(char c) {
        TrieNode node = new TrieNode();
        node.val = c;
    }
}

public class Trie {
    private TrieNode root;
    public Trie() {
        root = new TrieNode();
        root.val = ' ';
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode ws = root;
        for (int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if (ws.children[c - 'a'] == null) ws.children[c - 'a'] = new TrieNode(c);
            ws = ws.children[c - 'a'];
        }
        ws.isWord = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode ws = root;
        for (int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if (ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        if (ws.isWord == true) return true;
        else return false;
        //return true;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode ws = root;
        for (int i = 0; i < prefix.length(); i++){
            char c = prefix.charAt(i);
            if (ws.children[c - 'a'] == null) return false;
            ws = ws.children[c - 'a'];
        }
        return true;
    }
}

/*
在Trie中，不一定每个节点处都代表着单词，可能只是普通的前缀中的一个字符，所以TrieNode中要用一个isWord来显示的表示出走到当前
节点处，之前的prefix是不是一个单词。这个作用在后面的stratsWith和search中有用。求一个prefix是不是在tree当中，只要证明从根节
点开始，往下走有一个这样的字符串存在，至于是不是isWord无所谓。但对于search它是看一个单词是不是在这个tree中，所以即使遍历完
这个word，每个它是一个prefix，但是走到最后一个节点处，节点的isWord为false，那么这个search返回的是false；因为当前的字符串只
是prefix而不是word。
另外需要注意的是Trie中的操作必须是从根节点开始的，并不是说树的路径中存在这样一个字符串即可，要注意prefix的概念。
在TrieNode类中，要有一个不含参数的构造函数，因为在含参数的构造函数中存在TrieNode node = new TrieNode();这个语句。
*/
