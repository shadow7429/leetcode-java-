// startTime: 16: 26
// finishTime: 17: 07

//WRONG ANSWER : local optimal
public int minimumTotal(List<List<Integer>> triangle) {
        if (triangle.size() == 0) return 0;
        if (triangle.size() == 1) return triangle.get(0).get(0);
        
        int height = triangle.size();
        int res = Integer.MAX_VALUE;
        
        for (int i = 0; i < height - 1; i++){
            int sum = 0;
            int index = i;
            for (int j = height - 1; j >= 0; j--){
                List<Integer> l = triangle.get(j);
                if (index == 0 || index == j){
                    sum = sum + l.get(index);
                    index = index == 0? 0 : index - 1;
                }
                else {
                    index = l.get(index) >= l.get(index - 1) ? index - 1 : index;
                    sum = sum + l.get(index);
                }
            }
            res = Math.min(res, sum);
        }
        return res;
  }
  
  // Right Answer : DP
  public int minimumTotal(List<List<Integer>> triangle) {
    int[] A = new int[triangle.size()+1];
    for (int i = triangle.size()-1;i>=0;i--){
        for (int j=0;j<triangle.get(i).size();j++){
            A[j] = Math.min(A[j],A[j+1])+triangle.get(i).get(j);
        }
    }
    return A[0];
  }
