// startTime: 10:50
// finishTime: 11:05
https://leetcode.com/problems/contains-duplicate-iii/
// Time consuming...
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        for (int i = 0; i < nums.length; i++){
            for (int j = i + 1; j < i + k + 1 && j < nums.length; j++){
                if (Math.abs(nums[i] - nums[j]) <= t) return true;
            }
        }
        return false;
    }
}

// discuss
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if (nums == null || nums.length == 0 || k <= 0) {
            return false;
        }

        final TreeSet<Integer> values = new TreeSet<>();
        for (int ind = 0; ind < nums.length; ind++) {

            final Integer floor = values.floor(nums[ind] + t);
            final Integer ceil = values.ceiling(nums[ind] - t);
            if ((floor != null && floor >= nums[ind])
                    || (ceil != null && ceil <= nums[ind])) {
                return true;
            }

            values.add(nums[ind]);
            if (ind >= k) {
                values.remove(nums[ind - k]);
            }
        }

        return false;
    }
}
/*
这里学习到了一个新的数据结构 TreeSet, treeset对于找一个集合中在某区间的数来说非常方便，floor()函数返回的是在一个treeset中，
比给的数小的最大的数，如果不存在则返回null，ceiling()函数返回的是在一个treeset中比给定数大的最小的数，如果不存在则返回空。
所以看我们这道题，我们目的就是在一个窗口大小为k的区域内遍历其中每一个数，看nums[i] - t 到 nums[i] + t这个区间有没有数落在
这个区域内。如果有则返回true，如果没有则继续。
if (ind >= k) values.remove(nums[ind - k]); 这个语句则保证窗口大小始终为k，如果当前窗口大小大于k了，则减去最前面的。
*/
