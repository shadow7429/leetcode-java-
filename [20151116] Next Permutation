// startTime: 09: 30
// finishTime: 09: 59
// https://leetcode.com/problems/next-permutation/

public class Solution {
    public void nextPermutation(int[] nums) {
        if (nums.length <= 1) return;
        int index1 = -1;
        for (int i = 0; i < nums.length - 1; i++){
            if (nums[i + 1] > nums[i]) index1 = i;
        }
        
        int index2 = -1;
        for (int i = index1 + 1; i < nums.length && index1 >= 0; i++){
            if (nums[i] > nums[index1]) index2 = i;
        }
        
        int tmp;
        if (index1 >= 0)
        {
            tmp = nums[index1];
            nums[index1] = nums[index2];
            nums[index2] = tmp;
        }
        
        for (int i = index1 + 1; i < nums.length - 1; i++){
            for (int j = i + 1; j < nums.length; j++){
                if (nums[i] > nums[j]){
                    tmp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = tmp;
                }
            }
        }
        return;
    }
}
/*
对这道题的第一反应是暴利解决，就是求出给出的数组的所有的permutation，然后排序找出给出的序列的下一个，但是可想而知这种办法会
做很多不必要的操作。因此就要想怎么样获得下一个最大的，也就是在当前的序列上增加的最少。
如果要增加，就要用后面比较大的数字替换前面比较小的数字，为了尽可能的少增加，所以要考虑的几个方面是：
（1）找到高位中可替换的最低位
（2）找到地位中可替换的最小值
（3）因为经过替换之后数据肯定增加了，为了尽量减小增加的量，应该将替换后的位置之后的序列进行从小到大的排序，这样可以使后面的序列
值尽可能小。
*/
