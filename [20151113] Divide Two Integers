// startTime: 17: 04
// finishTime: 17: 34
// https://leetcode.com/problems/divide-two-integers/

// version 1.0
public class Solution {
    public int divide(int dividend, int divisor) {
        boolean sign = dividend / divisor >= 0 ? true : false;
        dividend = dividend >= 0 ? dividend : - dividend;
        divisor = divisor > 0 ? divisor : - divisor;
        if (dividend < divisor) return 0;
        int sum = divisor;
        int res = 0;
        int i = 1;
        while (sum <= dividend){
            if ((sum + sum) <= dividend){
                sum = sum + sum;
                i = i + i;
            }
            else {
                dividend = dividend - sum;
                sum = divisor;
                res = res + i;
                i = 1;
            }
        }
        return sign == true ? res : - res;
    }
} // Time Limited Exceeded. 用递归改进。

// version 2.0
public class Solution {
    public int divide(int dividend, int divisor) {
       long res = helper(dividend, divisor);
       return res > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)res;
    }
    public long helper (long dividend, long divisor){
        boolean sign = dividend < 0 != divisor < 0;
        dividend = dividend >= 0 ? dividend : - dividend;
        divisor = divisor > 0 ? divisor : - divisor;
        if (dividend < divisor) return 0;
        long sum = divisor;
        long i = 1;
        while ((sum + sum) <= dividend){
            sum = sum + sum;
            i = i + i;
        }
        return sign ? -(i + helper(dividend - sum, divisor)) : (i + helper(dividend - sum, divisor));
    }
}



