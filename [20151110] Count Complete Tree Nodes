// startTime: 22:20
// finishTime: 22:55
// https://leetcode.com/problems/count-complete-tree-nodes/

class Solution {
    int height(TreeNode root) {
        return root == null ? -1 : 1 + height(root.left);
    }
    public int countNodes(TreeNode root) {
        int h = height(root);
        return h < 0 ? 0 :
               height(root.right) == h-1 ? (1 << h) + countNodes(root.right)
                                         : (1 << h-1) + countNodes(root.left);
    }
}

/*
public class Solution {
    // A complete binary tree is a binary tree in which every level of the tree is fully filled, except the last level.
    // A full binary tree: every node has 0 or 2 children.
    int lastLevelNum = 0;
    
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        if (root.left == null && root.right == null) return 1;
        TreeNode p = root;
        //先深度优先走到最后找到树的高度
        int height = 0;
        while (p.left != null){
            height ++;
            p = p.left;
        }
        helper(root, 0, height);
        int sum = 0;
        sum = (int)Math.pow(2, height) - 1;
        sum = sum + lastLevelNum;
        return sum;
    }
    public void helper(TreeNode node, int level, int height){
        if (node == null) return;
        if (level == height - 1){
            if (node.left == null) return;
            else 
            if (node.right == null){
               lastLevelNum++;
               return;
            } 
            else {
                lastLevelNum = lastLevelNum + 2;
                return;
            }
        }
        helper(node.left, level + 1, height);
        helper(node.right, level + 1, height);
        return;
    }
}
*/
/*
第一个是discuss上面的最佳答案，跑同样地测例，它用时15ms，注释掉的是自己的代码，用时253ms。
*/
