// startTime: 10:56
// finishTime: 11:31
// https://leetcode.com/problems/combination-sum/

public class Solution {
    //public int remain = target;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        helper(candidates, target, new ArrayList<Integer>(), res);
        return res;
    }
    public void helper(int[] candidates, int remain, List<Integer> combination, List<List<Integer>> res){
        if(remain==0){
            Collections.sort(combination);
            if(!res.contains(combination))
            res.add(combination);
            return;
        }
        for(int c: candidates){
            if(remain-c<0)
            break;
            List<Integer> tmp = new ArrayList<Integer>(combination);
            tmp.add(c);
            helper(candidates, remain-c, tmp, res);
        }
        return;
    }
}
